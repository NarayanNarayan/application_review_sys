openapi: 3.0.3
info:
  title: Swagger ApplicantSystem - OpenAPI 3.0
  description: |-
    This is a sample Applicant System Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the Applicant System, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of ApplicantSystem, then click [here](https://editor.swagger.io/?url=https://ApplicantSystem.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load ApplicantSystem OAS 2.0` menu option!_
    
    Some useful links:
    - [The Applicant System repository](https://github.com/swagger-api/swagger-ApplicantSystem)
    - [The source API definition for the Applicant System](https://github.com/swagger-api/swagger-ApplicantSystem/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://127.0.0.1:8000/core/resumes/
tags:
  - name: Applicant
    description: Everything about your Applicants
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: System
    description: Access to ApplicantSystem orders
    externalDocs:
      description: Find out more about our System
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /applicant/:
    get:
      tags:
        - Applicant
      summary: Get List of applicants
      description: Get List of applicants
      operationId: updateApplicant
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Applicant'
        '400':
          description: Invalid ID supplied
        '404':
          description: Applicant not found
        '405':
          description: Validation exception
    post:
      tags:
        - Applicant
      summary: Add a new Applicant to the System
      description: Add a new Applicant to the System
      operationId: addApplicant
      requestBody:
        description: Create a new Applicant in the System
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Applicant'
          application/xml:
            schema:
              $ref: '#/components/schemas/Applicant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Applicant'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Applicant'
        '405':
          description: Invalid input
      security:
        - ApplicantSystem_auth:
            - write:Applicants
            - read:Applicants
  /applicant/{ApplicantId}:
    get:
      tags:
        - Applicant
      summary: Find Applicant by ID
      description: Returns a single Applicant
      operationId: getApplicantById
      parameters:
        - name: ApplicantId
          in: path
          description: ID of Applicant to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Applicant'
        '400':
          description: Invalid ID supplied
        '404':
          description: Applicant not found
      security:
        - api_key: []
        - ApplicantSystem_auth:
            - write:Applicants
            - read:Applicants
    put:
      tags:
        - Applicant
      summary: Updates a Applicant in the System with form data
      description: ''
      operationId: updateApplicantWithForm
      parameters:
        - name: ApplicantId
          in: path
          description: ID of Applicant that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of Applicant that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of Applicant that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - ApplicantSystem_auth:
            - write:Applicants
            - read:Applicants
    delete:
      tags:
        - Applicant
      summary: Deletes a Applicant
      description: delete a Applicant
      operationId: deleteApplicant
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: ApplicantId
          in: path
          description: Applicant id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid Applicant value
      security:
        - ApplicantSystem_auth:
            - write:Applicants
            - read:Applicants
  /skills:
    post:
      tags:
        - skills
      summary: Create skill
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the System
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        ApplicantId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Applicant:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: Applicant status in the System
          enum:
            - available
            - pending
            - sold
      xml:
        name: Applicant
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Applicant:
      description: Applicant object that needs to be added to the System
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Applicant'
        application/xml:
          schema:
            $ref: '#/components/schemas/Applicant'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    ApplicantSystem_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://ApplicantSystem3.swagger.io/oauth/authorize
          scopes:
            write:Applicants: modify Applicants in your account
            read:Applicants: read your Applicants
    api_key:
      type: apiKey
      name: api_key
      in: header